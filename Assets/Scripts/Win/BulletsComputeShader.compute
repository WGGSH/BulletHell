#pragma kernel CSMain

// 弾の構造体
struct BulletDX
{
	float3 pos;
	float3 velocity;
  float3 acceleration;
	float4 col;
  int state;
  float angle;
};

// 前回の更新からの経過時間
float DeltaTime;

// 合計経過時間
float TotalTime;

// 弾の構造化バッファ
RWStructuredBuffer<BulletDX> Bullets;

// (8, 1, 1)のスレッドで回す
[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// それぞれの位置情報に移動ベクトルを加算
  switch(Bullets[id.x].state){
    case 1:
      // 通常の移動
      Bullets[id.x].pos += Bullets[id.x].velocity ;
      if(Bullets[id.x].pos.x<-10 || Bullets[id.x].pos.x>10 ||
        Bullets[id.x].pos.y<-10 || Bullets[id.x].pos.y>10 ||
        Bullets[id.x].pos.z<-10 || Bullets[id.x].pos.z>10){
        // フィールド外に出ると,処理を停止
        Bullets[id.x].state = 0;
        Bullets[id.x].pos.x=0;
        Bullets[id.x].pos.y=0;
        Bullets[id.x].pos.z=0;
      }
    break;
    case 2:
      // 加速度ありの移動
      Bullets[id.x].velocity += Bullets[id.x].acceleration;
      Bullets[id.x].pos += Bullets[id.x].velocity ;
      if(Bullets[id.x].pos.x<-10 || Bullets[id.x].pos.x>10 ||
        Bullets[id.x].pos.y<-10 || Bullets[id.x].pos.y>10 ||
        Bullets[id.x].pos.z<-10 || Bullets[id.x].pos.z>10){
        // フィールド外に出ると,処理を停止
        Bullets[id.x].state = 0;
        Bullets[id.x].pos.x=0;
        Bullets[id.x].pos.y=0;
        Bullets[id.x].pos.z=0;
      }
    break;
    default:
    break;
  }
}
